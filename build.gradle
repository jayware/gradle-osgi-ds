plugins {
    id 'com.github.hierynomus.license' version '0.12.1'
    id 'com.jfrog.bintray' version '1.5'
    id "com.gradle.plugin-publish" version "0.9.4"

}

apply plugin: 'java'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'findbugs'
apply plugin: 'license'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.gradle.plugin-publish"

group = 'org.jayware'

repositories {
   mavenCentral()
   jcenter()
}

dependencies {
    compile gradleApi()

    compile 'org.osgi:org.osgi.service.component.annotations:1.3.0'
    compile 'org.apache.felix:org.apache.felix.scr.generator:1.16.0'
    compile 'org.apache.felix:org.apache.felix.scr.ds-annotations:1.2.8'

    testCompile "org.testng:testng:6.11"
    testCompile "org.assertj:assertj-core:3.8.0"
    testCompile "org.mockito:mockito-core:1.10.19"
}

test {
    useTestNG() {}
}

findbugs {
    toolVersion = '3.0.1'
    sourceSets = [sourceSets.main]
}

license {
    header file('HEADER.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders = true
    include '**/*.java'
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    pkg {
        repo = 'maven'
        name = 'gradle-osgi-ds'
        userOrg = 'jayware'
        licenses = ['Apache-2.0']
        vcsUrl = project.vcsUrl
        version {
            name = project.version
            desc = "${project.description}"
            released  = new Date()
            vcsTag = project.version
        }
    }
    publications = ['GradleOsgiDS']
}

pluginBundle {
    website = project.website
    vcsUrl = project.vcsUrl
    description = project.description
    plugins {
        osgiDs {
            id = "org.jayware.osgi-ds"
            displayName = 'OSGi Declarative Services plugin for Gradle'
            tags = [ 'gradle', 'plugin', 'osgi', 'ds', 'declarative services', 'scr' ]
        }
    }
    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
        version = project.version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

plugins.withType(MavenPublishPlugin) {
    publishing {
        publications {
            GradleOsgiDS(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId project.group
                artifactId project.name
                version project.version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', "${project.group}:${project.name}")
                    root.appendNode('description', project.description)
                    root.appendNode('url', project.website)
                    root.appendNode('inceptionYear', '2016')
                    def scm = root.appendNode('scm')
                    scm.appendNode('url', project.website)
                    scm.appendNode('connection', project.vcsUrl)
                    scm.appendNode('developerConnection', project.vcsUrl)
                    def developers = root.appendNode('developers')
                    def dev = developers.appendNode('developer')
                    dev.appendNode('name', 'Elmar Schug')
                    dev.appendNode('email', 'elmar.schug@jayware.org')
                    dev.appendNode('organization', 'JayWare')
                    dev.appendNode('organizationUrl', 'https://jayware.org')
                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', project.licenseName)
                    license.appendNode('url', project.licenseUrl)
                    license.appendNode('distribution', 'repo')
                }
            }
        }
    }
}
